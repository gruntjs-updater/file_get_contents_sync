{"version":3,"file":"file_get_contents_sync.all.devel.js","sources":["?","../src/js/main.js"],"names":["exports","global","fn","path","format","fs","require","private","init","console","error","__filename","r","value","arr","i","toString","push","join","result","lstatSync","isDirectory","dir","files","readdirSync","get_path","is_path_executable","ext","split","length","readFileSync","main","module","process","argv","log","this"],"mappings":";;;;;;;CAAC,SAASA,SAASC;IAASA,OAAO,UAAUD;ICK7C,IAAIE,KAAK,SAASC,MAAKC;QAEnB,IAAIC,KAAKC,QAAQ;QACjB,IAAIC;QAsBJA,QAAQC,OAAO;YAEX,WAAUL,SAAS,UAAS;gBACxBM,QAAQC,MAAMC,aAAa;gBAC3B;;YAIJ,IAAIC,IAAIL,QAAQM,MAAMV;YAGtB,IAAGC,QAAO;gBACN,QAAOA;kBAGH,KAAI;oBACA,IAAIU;oBACJ,KAAI,IAAIC,KAAKH,GAAE;wBAEX,WAAUA,EAAEG,OAAO,UAAS;4BACxBH,EAAEG,KAAKH,EAAEG,GAAGC;;wBAGhBF,IAAIG,KAAKL,EAAEG;;oBAGfH,IAAIE,IAAII,KAAK;;kBAEjB;;YAIR,OAAON;;QAWXL,QAAQM,QAAQ,SAASV;YAErB,IAAIW,UACCF,GACAO;YAIL,IAAGd,GAAGe,UAAUjB,MAAMkB,eAAc;gBAEhC,IAAIC,MAAMnB;gBACV,IAAIoB,QAAQlB,GAAGmB,YAAYrB;gBAE3B,KAAI,IAAIY,KAAKQ,OAAM;oBAEfpB,OAAOmB,MAAM,MAAMC,MAAMR;oBAEzBH,IAAIL,QAAQkB,SAAStB;oBAErBW,IAAIG,KAAKL;;mBAIb;gBAEAA,IAAIL,QAAQkB,SAAStB;gBAErBW,IAAIG,KAAKL;;YAGbO,OAAOhB,QAAQW;YAEf,OAAOK;;QAIXZ,QAAQmB,qBAAqB,SAASvB;YAElC,IAAIwB,MAAMxB,KAAKyB,MAAM;YACrBD,MAAMA,IAAIA,IAAIE,SAAO;YAErB,IAAGF,QAAQ,MAAK;gBACZ,OAAO;mBAEP;gBACA,OAAO;;;QAKfpB,QAAQkB,WAAW,SAAStB;YAExB,IAAIS;YAEJ,IAAGL,QAAQmB,mBAAmBvB,OAAM;gBAEhCS,IAAIN,QAAQH;mBAEZ;gBAEAS,IAAIP,GAAGyB,aAAa3B,MAAMa;;YAG9B,OAAOJ;;QAKX,OAAOL,QAAQC;;IAInB,IAAGF,QAAQyB,SAASC,QAAO;QAEvB,IAAIpB,IAAIV,GAAG+B,QAAQC,KAAK,IAAGD,QAAQC,KAAK;QACxCzB,QAAQ0B,IAAIvB;WAEZ;QAEAoB,OAAOhC,UAAUE;;ODxJ6D;IAAW,OAAOkC","sourcesContent":[null,"/**\n * -- Can be called in console with __filename path format\n * -- Can be required with require(moduleName)(path,format)\n * \n */\nvar fn = function(path,format){\n\n    var fs = require(\"fs\");\n    var private = {};\n\n    ////////////////////////////////////////\n    //  PUBLIC VARIABLES\n    ////////////////////////////////////////\n\n\n    ////////////////////////////////////////\n    //  PRIVATE VARIABLES\n    ////////////////////////////////////////\n    \n\n    ////////////////////////////////////////\n    //  PUBLIC METHODS\n    ////////////////////////////////////////\n\n\n    ////////////////////////////////////////\n    //  PRIVATE METHODS\n    ////////////////////////////////////////\n    \n    \n    private.init = function(){\n        \n        if(typeof path !== 'string'){\n            console.error(__filename + ' requires a PATH argument.');\n            return;\n        }\n\n        //Get all files in the path given as an object\n        var r = private.value(path);\n      \n        //Format\n        if(format){\n            switch(format){\n                \n                //Return all results as a single string.\n                case(\"string\"):\n                    var arr = [];\n                    for(var i in r){\n                        \n                        if(typeof r[i] !== 'string'){\n                            r[i] = r[i].toString();\n                        }\n                        \n                        arr.push(r[i]);\n                    }\n                    \n                    r = arr.join(\"\");\n                    \n                default:\n            }\n        }\n      \n        return r;\n\n    };\n    \n    \n    /**\n     * Fetches, names template files.\n     * \n     * @param {string} path to lookup\n     * @returns {array}\n     */\n    private.value = function(path){\n        \n        var arr = []        //return value container\n            ,r              //loop result\n            ,result = {}    //return result\n            ;\n        \n        //If path is a directory\n        if(fs.lstatSync(path).isDirectory()){\n            \n            var dir = path;\n            var files = fs.readdirSync(path);\n                            \n            for(var i in files){\n\n                path = dir + '/' + files[i];\n\n                r = private.get_path(path);\n                \n                arr.push(r);\n            }\n\n        }\n        else{\n            \n            r = private.get_path(path);\n                \n            arr.push(r);\n        }\n        \n        result[path] = arr;\n        \n        return result;\n    };\n    \n    \n    private.is_path_executable = function(path){\n        \n        var ext = path.split(\".\");\n        ext = ext[ext.length-1];\n\n        if(ext === 'js'){\n            return true;\n        }\n        else{\n            return false;\n        }\n    };\n    \n    \n    private.get_path = function(path){\n        \n        var r;\n        \n        if(private.is_path_executable(path)){\n                    \n            r = require(path);\n        }\n        else{\n\n            r = fs.readFileSync(path).toString();\n        }\n\n        return r;\n    };\n    \n    \n    //Run constructor\n    return private.init();\n    \n};\n\nif(require.main === module){ \n    //Called directly\n    var r = fn(process.argv[2],process.argv[3]);\n    console.log(r);\n}\nelse{ \n    //Required as a module\n    module.exports = fn;\n}"]}